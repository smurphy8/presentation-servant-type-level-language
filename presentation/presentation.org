#+TITLE: Servant 
#+SUBTITLE: a type level dsl for web api 
#+AUTHOR: Scott Murphy
#+EMAIL: scottmurphy09@gmail.com
#+DESCRIPTION: An introduction to web api programming using type level features
#+KEYWORDS: types,servant,api,web,haskell
#+OPTIONS: H:1
#+LATEX_CLASS: beamer
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+BEAMER_THEME: blue
#+BEAMER_COLOR_THEME:orchid
#+BEAMER_FONT_THEME:
#+BEAMER_INNER_THEME:
#+BEAMER_OUTER_THEME:
#+BEAMER_HEADER:
#+BEAMER_FRAME_LEVEL: 2

# To Run pandoc -t slidy -s presentation.org -o presentation.html --standalone

** Useful Resources
+ [[https://haskell-servant.github.io/][Servant Website on Github: https://haskell-servant.github.io/]]
+ [[https://www.andres-loeh.de/Servant/servant-wgp.pdf][Servant Paper: https://www.andres-loeh.de/Servant/servant-wgp.pdf]]
+ [[https://hackage.haskell.org/package/servant][Servant on Hackage: https://hackage.haskell.org/package/servant]]
+ [[https://hackage.haskell.org/package/servant-client][Servant Client on Hackage: https://hackage.haskell.org/package/servant-client]]
+ [[https://hackage.haskell.org/package/servant-server][Servant Server on Github: https://hackage.haskell.org/package/servant-server]]
+ [[https://hackage.haskell.org/packages/search?terms=servant][All Servant things on Hackage]]
** Types and Programming
One view of types is as a method of capturing and verifying some of what can be known about a program before it is ran.
** Discretion 
How much information to capture is 
decided by the *programmer* and the languages ability to 
express it.

Typed functional programming languages like Haskell give you a lot of tools to specify your programs 
in the type system.  But amount of detail and which details to specify are as always, left up to the programmer.


/You Choose/ - Hogarth Hughes 
** Example 1
*** Encoding Data Simply 
Some programmers like to use only enough types to
say what the computer needs. Here String is a type 
that matters to a PC but not really to a human.

#+begin_src haskell 
buildCustomerEntry :: String -> String -> String -> Customer
buildCustomerEntry name address notes = ...
#+end_src

** Example 2
*** Encoding Data More Specifically 
Often, haskell programmers prefer a more detailed sort of typing.

In the function below, the same actions take place but the inputs 
are going to be checked at compile time.

# Note: Talk about smart constructors 

#+begin_src haskell 
buildCustomerEntry :: Name -> Address -> Notes  -> Customer
buildCustomerEntry name address notes = ...
#+end_src

** Typed Web Services
Servant takes a high detail approach to creating a web service.
#+begin_src haskell 
"games" :> Get '[JSON] [Game]
#+end_src
You can look at this (possibly without knowing haskell) 
and tell several things about the http request behind this.

+ It is a Get request
+ It has something to do with JSON 
+ It has something to do with some type named Game

# Note: If you know what JSON is and what a GET service are you probably can figure out it will return JSON 
# you can probably also figure out that some type named Game is returned 

** Type Level DSL 

#+begin_src haskell 
type ListAPI = "games" :> Get '[JSON] [Game]
#+end_src
+ Servant uses haskells type system to pass this infromation about a web service around, in this case as =ListAPI= . 
+ Haskell allows for very expressive types
+ In fact so expressive, we can define a grammer at the type level!

** Type Level Grammar  
From the servant paper
#+begin_src haskell 
api::= api  :<|> api                       rtype   ::= Headers headers  type        
     | item :>   api                                 | type                             
     | method                                                                     
                                           headers ::= ’[header, ...]             
item ::= path                                                                   
     | header                              ctypes  ::= ’[ctype, ...]               
     | ReqBody     ctypes  type                                                       
     | Capture     symbol  type            header  ::= Header symbol  type         
     | QueryFlag   symbol                                                           
     | QueryParam  symbol  type            symbol  ::= a type-level string         
     | QueryParams symbol  type            path    ::= symbol                                      
     | ...                                 type    ::= a Haskell type                
method ::= 
       Get    ctypes  rtype                ctype   ::= 
     | Put    ctypes  rtype                        PlainText                                       
     | Post   ctypes  rtype                      | JSON                             
     | Delete ctypes  rtype                      | HTML                             
     | Patch  ctypes  rtype                      | ...                              
     | Raw                                                    
     | ...                  
      
#+end_src
** ListAPI Decomposed
Our original type
#+begin_src haskell 
type ListAPI = "games" :> Get '[JSON] [Game]
#+end_src

#+begin_src haskell 
:> -- adds an item to an api 
#+end_src 

#+begin_src haskell 
"games" -- Type level literal that is the item being added
#+end_src

#+begin_src haskell 
Get '[JSON] [Game] -- The method of the route
#+end_src

#+begin_src haskell 
'[JSON] -- The content type or ctype
#+end_src

#+begin_src haskell 
[Game] -- The return type or rtype
#+end_src

** A matter of interpretation 
Once we have defined something as a grammer an obvious thing to do is to compile or interpret it into something
new.

There are a few built in interpreters that come with =Servant=. 


** Server
The interpreter that transforms an API into a web service
#+begin_src haskell
serve  :: HasServer api '[] =>
          Proxy api -> ServerT api Handler -> Application
#+end_src
*api* is specified as *ListAPI*
#+begin_src haskell
serve  :: HasServer ListAPI '[] =>
          Proxy ListAPI -> ServerT ListAPI Handler -> Application
#+end_src

** Server Example 
#+begin_src haskell 

startApp :: IO ()
startApp = run 8080 app

app :: Application
app = serve listApi listGamesH

listGamesH :: Handler [Game]
listGamesH = do maybeGames  <- liftIO parseGames
                maybe (return []) return maybeGames
#+end_src
** Client
The interpreter that transforms an API into a request    

#+begin_src haskell 
client :: HasClient api => 
           Proxy api -> Client api
#+end_src
*api* is specified as *ListAPI*
#+begin_src haskell
client :: HasClient ListAPI => 
           Proxy ListAPI -> Client ListAPI
#+end_src

+  The ListAPI is part of the return type, unlike in the serve interpreter

#+begin_src haskell
class RunClient m => HasClient m api where
  type Client (m :: * -> *) (api :: *) :: *
  clientWithRoute :: Proxy m -> Proxy api -> Request -> Client m api
#+end_src
All the constituent parts of ListAPI are members of this type and the grammar is constructed 
so that their composition is also a member.

** Client Example 'path' from 'item'

#+begin_src haskell
instance (KnownSymbol path, HasClient m api) => HasClient m (path :> api) where
  type Client m (path :> api) = Client m api

  clientWithRoute pm Proxy req =
     clientWithRoute pm (Proxy :: Proxy api)
                     (appendToPath p req)

    where p = pack $ symbolVal (Proxy :: Proxy path)
#+end_src 
+ The haskell type variable *path* is known by the compiler to be a symbol (KnownSymbol path)
+ The function /symbolVal/ lowers the type level string to the value level, it is then added to a path being built up 
+ Every element from our grammer and their accompanying compositions have to be handled 
+ Thanks to everyone who did this work (it seems awful).
** Client Example (User View)
All the hardwork pays off at the user level.
#+begin_src haskell
getListGames :: ClientM [Game]
getListGames = client api
#+end_src
Our interpreter /client/ was able to transform the api into a function that represents all the route specific information 
needed to query the server!

Here is what it looks like with the small amount of supporting code to make the requests happen.
#+begin_src haskell 
exampleGetListGames :: IO (Either ServantError [Game])
exampleGetListGames = do
  manager' <- Client.newManager Client.defaultManagerSettings  -- Managers are haskell's resource handler to use the network
  url <- Servant.Common.BaseUrl.parseBaseUrl "http://localhost:8080" -- The base url parsed and added into the request
  runClientM getListGames (ClientEnv manager' url) -- The complete request is sent!
#+end_src

** A look back
+ Servant lets you have detailed views into the information needed and delivered by an API
+ It is a type-level domain specific language (DSL) 
+ interpreters can be built to grab this information and use it for a variety of purposes
+ Because things are done at the type level, lots of correctness checking is automatic when building these interpreters
+ That means extra work on the implementation but more confidence at the call point

** On ward and upward
*** You want more!
+ I want tests automated!
+ I want auth
+ I want docs
+ I want to generate api's in other systems

** Servant says yes!
** Tests
The =servant-aeson-specs= package allows 
the specification of...
+ Round Trip
+ Golden Tests
** Round Trip Tests

Round trip tests ensure that a given serialization is consistent
#+begin_src haskell
type A -- Some Type A
type S -- Some Serialization S

serialize :: A -> S
unSerialize :: S -> A

-- Round Trip Test for A
roundTripTest :: (A -> S) -> (S -> A) -> A -> Bool 
roundTripTest s u a = (s a) == (u a)

#+end_src


** Golden Tests
Golden tests ensure that a serialization is consistent over time.

#+begin_src haskell

storedSerializationFileName = "A.golden"
storedComparisonFileName = "A.comparison"

writeToFile :: FileName -> S -> IO ()

readFromFile :: FileName -> IO S

matchContents :: FileName -> FileName -> IO Bool 

-- Round Trip Test for A

-- ensures identical serialization
goldenTest :: (A -> S) -> (S -> A) -> A -> IO Bool 
goldenTest s u a = do 
     _ <- writeToFile storedComparisonFileName (s a)
     matchContents storedComparisonFileName storedSerializationFileName
  
#+end_src





** Servant Aeson Specs 1 of 3
=Aeson= is the library in haskell for generating JSON.  Say I want to serialize all my types into JSON.
Well, after writing the code to do that, I might want a set of round trip tests to make sure the serialization 
works both ways.  I also may want a set of golden tests to compare old serializations against current serializations.

Writing these tests is very boiler plate but also very important.  Here is the code to write them with Servant.

#+begin_src haskell 
spec = apiSpecs specProxy
 where
    specProxy :: Proxy ListAPI
    specProxy = Proxy

#+end_src

** Servant Aeson Specs 2 of 3
Is that it?  Well, not quite you also have to have ~Arbitrary~ instances for all the types involved which allow the
QuickCheck library to generate examples of the various types.  


#+begin_src haskell

-- A few instances of Arbitrary
instance Arbitrary Score where
  arbitrary = genericArbitrary

instance Arbitrary Team where
  arbitrary = genericArbitrary

instance Arbitrary GameDate where
  arbitrary = genericArbitrary


instance Arbitrary Game where
  arbitrary = genericArbitrary

#+end_src

** Servant Aeson Specs 3 of 3

Servant's API system does let you know what types need the instances though!

#+begin_src 

test/Spec.hs:52:8-25: error: …
    • No instance for (Arbitrary Game) arising from a use of ‘apiSpecs’
    • In the expression: apiSpecs specProxy
      In an equation for ‘spec’:
          spec
            = apiSpecs specProxy
            where
                specProxy :: Proxy ListAPI
                specProxy = Proxy
   |
Compilation failed.

#+end_src


** Problems with Servant

You can use servant to do lots of things but it does have some drawbacks

*** Error handling
Often the type errors that are generated are quite crytpic
*** Lack of Plugins
I would love to see more types of plugins for servant.  

** Conclusion 
Servant shows how a well thought out typed dsl system can add a huge amount of benefit 
to understanding a program.  It has had a huge impact in haskell since its introduction
in 2014.  I expect more big things from it in the future!
