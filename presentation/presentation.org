#+TITLE: Servant 
#+SUBTITLE: a type level dsl for web api 
#+AUTHOR: Scott Murphy
#+EMAIL: scottmurphy09@gmail.com
#+DESCRIPTION: An introduction to web api programming using type level features
#+KEYWORDS: types,servant,api,web,haskell
#+OPTIONS: H:1
#+LATEX_CLASS: beamer
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+BEAMER_THEME: blue
#+BEAMER_COLOR_THEME:orchid
#+BEAMER_FONT_THEME:
#+BEAMER_INNER_THEME:
#+BEAMER_OUTER_THEME:
#+BEAMER_HEADER:
#+BEAMER_FRAME_LEVEL: 2

# To Run pandoc -t slidy -s presentation.org -o presentation.html --standalone


** Types and Programming
One view of types is as a method of capturing and verifying 
some of what can be known about a program before it is ran.
** Useful Resources
+ [[https://haskell-servant.github.io/][Servant Website on Github]]
+ [[https://www.andres-loeh.de/Servant/servant-wgp.pdf][Servant Paper]]
g
** Discretion 
How much information to capture is 
decided by the programmer and the languages ability to 
express it.

** Example 1
*** Encoding Data Simply 
The programmer could note only the meaning that matters 
to the computer.  Here String is a type that matters to a PC 
but not really to a human.
#+begin_src haskell 
buildCustomerEntry :: String -> String -> String -> Customer
buildCustomerEntry name address notes = ...
#+end_src

** Example 2
*** Encoding Data More Specifically 
Another way of encoding the data would be to specifically require 
the incoming data to be something previously discovered to be a 
Name, Address and Notes.

#+begin_src haskell 
buildCustomerEntry :: Name -> Address -> Notes  -> Customer
buildCustomerEntry name address notes = ...
#+end_src

** Typed Web Services
Servant takes a high detail approach to creating a web service.
#+begin_src haskell 
"games" :> Get '[JSON] [Game]
#+end_src
You can look at this and tell several things about the http request behind this.

+ It is a Get request
+ It has something to do with JSON 
+ It has something to do with some type named Game

# Note: If you know what JSON is and what a GET service are you probably can figure out it will return JSON 
# you can probably also figure out that some type named Game is returned 

** Type Level DSL 

#+begin_src haskell 
type ListAPI = "games" :> Get '[JSON] [Game]
#+end_src
+ Servant uses haskells type system to pass this infromation about a web service around as a 
  first class citizen.  In this case =ListAPI= . 
+ Haskell allows for very expressive types
+ In fact so expressive, we can define a grammer at the type level!

From the servant paper 


